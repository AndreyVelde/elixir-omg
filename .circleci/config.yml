version: 2
jobs:
  build:
    docker:
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/omisego_dev
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: omisego_dev
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      # - restore_cache:
      #     keys:
      #       - v1-mix-cache-{{ checksum "mix.lock" }}
      - run:
          name: Install Hex
          command: |
            mix do local.hex --force, local.rebar --force
      - run:
          name: Get Dependencies
          command: |
            mix do deps.get, deps.compile
      # - save_cache:
      #     key: v1-mix-cache-{{ checksum "mix.lock" }}
      #     paths: "deps"
      - run:
          name: Compile
          command: mix compile
      - persist_to_workspace:
          root: .
          paths:
            - .circleci
            - dialyzer.ignore-warnings
            - .formatter.exs
            - .git
            - .gitignore
            - _build
            - .credo.exs
            - apps
            - bin
            - config
            - db/.gitkeep
            - deps
            - doc
            - mix.exs
            - mix.lock
            - deploy_and_populate.sh
            - launcher.py
            - docker-compose.yml
            - rel/

  test:
    docker:
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/omisego_dev
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: omisego_dev
          MIX_ENV: test
    working_directory: ~/repo

    steps:
      - attach_workspace:
           at: .

      - run: mix local.hex --force
      - run: mix local.rebar --force

      # - restore_cache:
      #     keys:
      #       - v1-mix-cache-{{ checksum "mix.lock" }}

      - run: mix test

  lint:
    docker:
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/omisego_dev
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: omisego_dev
          MIX_ENV: test
    working_directory: ~/repo

    steps:
      - attach_workspace:
           at: .
      - run: MIX_ENV=test mix do local.hex --force, local.rebar --force, compile --warnings-as-errors --force, test --exclude test, credo, format --check-formatted --dry-run

  coveralls_and_integration_tests_child_chain:
    docker:
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/omisego_dev
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: omisego_dev
          MIX_ENV: test
    working_directory: ~/repo

    steps:
      - attach_workspace:
           at: .

      - run: mix local.hex --force
      - run: mix local.rebar --force

      # - restore_cache:
      #     keys:
      #       - v1-mix-cache-{{ checksum "mix.lock" }}

      - run:
          name: Integration Tests & Coveralls Part Child Chain
          command: |
            # Don't submit coverage report for forks, but let the build succeed
            export SHELL=/bin/bash
            if [[ -z "$COVERALLS_REPO_TOKEN" ]]; then
              MIX_ENV=test mix coveralls.html --parallel --umbrella --include child_chain --exclude watcher --exclude common --trace
            else
              MIX_ENV=test mix coveralls.circle --parallel --umbrella --include child_chain --exclude watcher --exclude common --trace ||
                # if mix failed, then coveralls_merge won't run, so signal done here and return original exit status
                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done" && exit $retval)
            fi
      - store_artifacts:
          path: cover/excoveralls.html

  coveralls_and_integration_tests_watcher:
    docker:
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/omisego_dev
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: omisego_dev
          MIX_ENV: test
    working_directory: ~/repo

    steps:
      - attach_workspace:
           at: .

      - run: mix local.hex --force
      - run: mix local.rebar --force

      # - restore_cache:
      #     keys:
      #       - v1-mix-cache-{{ checksum "mix.lock" }}

      - run:
          name: Integration Tests & Coveralls Part Watcher
          command: |
            # Don't submit coverage report for forks, but let the build succeed
            export SHELL=/bin/bash
            if [[ -z "$COVERALLS_REPO_TOKEN" ]]; then
              MIX_ENV=test mix coveralls.html --parallel --umbrella --include watcher --exclude child_chain --exclude common --trace
            else
              MIX_ENV=test mix coveralls.circle --parallel --umbrella --include watcher --exclude child_chain --exclude common --trace ||
                # if mix failed, then coveralls_merge won't run, so signal done here and return original exit status
                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done" && exit $retval)
            fi
      - store_artifacts:
          path: cover/excoveralls.html

  coveralls_and_integration_tests_common:
    docker:
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/omisego_dev
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: omisego_dev
          MIX_ENV: test
    working_directory: ~/repo

    steps:
      - attach_workspace:
           at: .

      - run: mix local.hex --force
      - run: mix local.rebar --force

      # - restore_cache:
      #     keys:
      #       - v1-mix-cache-{{ checksum "mix.lock" }}

      - run:
          name: Integration Tests & Coveralls Part Common
          command: |
            # Don't submit coverage report for forks, but let the build succeed
            export SHELL=/bin/bash
            if [[ -z "$COVERALLS_REPO_TOKEN" ]]; then
              MIX_ENV=test mix coveralls.html --parallel --umbrella --include common --exclude watcher --exclude child_chain --trace
            else
              MIX_ENV=test mix coveralls.circle --parallel --umbrella --include common --exclude watcher --exclude child_chain --trace ||
                # if mix failed, then coveralls_merge won't run, so signal done here and return original exit status
                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done" && exit $retval)
            fi
      - store_artifacts:
          path: cover/excoveralls.html

  dialyzer:
    docker:
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/omisego_dev
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: omisego_dev
          MIX_ENV: test

    working_directory: ~/repo

    steps:
      - attach_workspace:
           at: .

      - run: mix local.hex --force
      - run: mix local.rebar --force

      # - restore_cache:
      #     keys:
      #       - v1-mix-cache-{{ checksum "mix.lock" }}

      - restore_cache:
          keys:
            - v1-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.lock" }}
            - v1-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.exs" }}
            - v1-plt-cache-{{ ".tool-versions" }}

      - run:
          name: Unpack PLT cache
          command: |
            mkdir -p _build/test
            cp plts/dialyxir*.plt _build/test/ || true
            mkdir -p ~/.mix
            cp plts/dialyxir*.plt ~/.mix/ || true

      - run: mix dialyzer --plt

      - run:
          name: Pack PLT cache
          command: |
            mkdir -p plts
            cp _build/test/dialyxir*.plt plts/
            cp ~/.mix/dialyxir*.plt plts/

      - save_cache:
          key: v1-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.lock" }}
          paths:
            - plts

      - save_cache:
          key: v1-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.exs" }}
          paths:
            - plts

      - save_cache:
          key: v1-plt-cache-{{ ".tool-versions" }}
          paths:
            - plts

      - run: mix dialyzer --format short --halt-exit-status

  release:
    docker:
      # Ensure .tool-versions matches
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          MIX_ENV: dev
    working_directory: ~/repo

    steps:
      - attach_workspace:
           at: .
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: MIX_ENV=prod mix release --name watcher --warnings-as-errors --env prod
      - run: MIX_ENV=prod mix release --name child_chain --warnings-as-errors --env prod
      - run: MIX_ENV=dev mix release --name watcher --warnings-as-errors --env dev
      - run: MIX_ENV=dev mix release --name child_chain --warnings-as-errors --env dev
      - run:
          name: Collecting Watcher artifacts
          command: |
            mkdir -p ci_artifact
            mv ./_build/prod/rel/watcher/releases/*/watcher.tar.gz ./ci_artifact/prod_watcher.tar.gz
            mv ./_build/dev/rel/watcher/releases/*/watcher.tar.gz ./ci_artifact/dev_watcher.tar.gz
            mv ./_build/prod/rel/child_chain/releases/*/child_chain.tar.gz ./ci_artifact/prod_child_chain.tar.gz
            mv ./_build/dev/rel/child_chain/releases/*/child_chain.tar.gz ./ci_artifact/dev_child_chain.tar.gz
          when: always
      - store_artifacts:
          name: Uploading watcher CI artifacts
          path: ./ci_artifact

  coveralls_merge:
    docker:
      # Ensure .tool-versions matches
      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02
        environment:
          MIX_ENV: test

    steps:
      - run:
          name: Tell coveralls.io build is done
          command: curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done"

  build_and_deploy_development:
    docker:
      - image: ubuntu:16.04
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update && apt-get install -y lsb-release curl
            curl -sSL https://get.docker.com/ > docker.sh && chmod +x docker.sh && ./docker.sh
      - run:
          name: Install gcloud SDK
          command: |
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            apt-get update -y && apt-get install -y google-cloud-sdk kubectl
      - run:
          name: Initialise & authenticate gcloud SDK
          command: |
            echo "${GCP_KEY_FILE}" | base64 --decode >> /tmp/gcp_key.json
            gcloud auth activate-service-account --key-file /tmp/gcp_key.json
            gcloud config set project ${GCP_ACCOUNT_ID}
            gcloud config set compute/zone ${GCP_ZONE}
            gcloud container clusters get-credentials ${GCP_CLUSTER_DEVELOPMENT}
      - run:
          name: Build & Deploy Services
          command: |
            docker build -t elixir-omg .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            export DOCKER_IMAGE=jakebunce/elixir-omg:$CIRCLE_SHA1
            docker tag elixir-omg $DOCKER_IMAGE
            docker push jakebunce/elixir-omg:$CIRCLE_SHA1
            kubectl set image statefulset childchain childchain=$DOCKER_IMAGE
            while true; do if [ "$(kubectl get pods childchain-0 -o jsonpath=\"{.status.phase}\" | grep Running)" ]; then break; fi; done
            kubectl set image statefulset watcher watcher=$DOCKER_IMAGE
            kubectl set image statefulset childchain-parity childchain=$DOCKER_IMAGE
            while true; do if [ "$(kubectl get pods childchain-parity-0 -o jsonpath=\"{.status.phase}\" | grep Running)" ]; then break; fi; done
            kubectl set image statefulset watcher-parity watcher=$DOCKER_IMAGE

  build_and_deploy_staging:
    docker:
      - image: ubuntu:16.04
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update && apt-get install -y lsb-release curl
            curl -sSL https://get.docker.com/ > docker.sh && chmod +x docker.sh && ./docker.sh
      - run:
          name: Install gcloud SDK
          command: |
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            apt-get update -y && apt-get install -y google-cloud-sdk kubectl
      - run:
          name: Initialise & authenticate gcloud SDK
          command: |
            echo "${GCP_KEY_FILE}" | base64 --decode >> /tmp/gcp_key.json
            gcloud auth activate-service-account --key-file /tmp/gcp_key.json
            gcloud config set project ${GCP_ACCOUNT_ID}
            gcloud config set compute/zone ${GCP_ZONE}
            gcloud container clusters get-credentials ${GCP_CLUSTER_STAGING}
      - run:
          name: Build & Deploy Services
          command: |
            docker build -t elixir-omg .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            export DOCKER_IMAGE=jakebunce/elixir-omg:$CIRCLE_SHA1
            docker tag elixir-omg $DOCKER_IMAGE
            docker push jakebunce/elixir-omg:$CIRCLE_SHA1
            kubectl set image statefulset childchain childchain=$DOCKER_IMAGE
            while true; do if [ "$(kubectl get pods childchain-0 -o jsonpath=\"{.status.phase}\" | grep Running)" ]; then break; fi; done
            kubectl set image statefulset watcher watcher=$DOCKER_IMAGE

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - coveralls_merge:
          requires:
            - coveralls_and_integration_tests_child_chain
            - coveralls_and_integration_tests_watcher
            - coveralls_and_integration_tests_common
      - coveralls_and_integration_tests_child_chain:
          requires: [build]
      - coveralls_and_integration_tests_watcher:
          requires: [build]
      - coveralls_and_integration_tests_common:
          requires: [build]
      - lint:
          requires: [build]
      - dialyzer:
          requires: [build]
      - test:
          requires: [build]
      - release:
          requires: [build]
          filters:
            branches:
              only:
                - master
      - build_and_deploy_development:
          requires:
            - build
            - lint
            - dialyzer
            - test
            - release
            - coveralls_and_integration_tests_child_chain
            - coveralls_and_integration_tests_watcher
            - coveralls_and_integration_tests_common
          filters:
            branches:
              only:
                - master
      - build_and_deploy_staging:
          requires:
            - build
            - lint
            - dialyzer
            - test
            - coveralls_and_integration_tests_child_chain
            - coveralls_and_integration_tests_watcher
            - coveralls_and_integration_tests_common
          filters:
            branches:
              only:
                - v0.1
